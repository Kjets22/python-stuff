
import requests
import pandas as pd
import concurrent.futures
from datetime import datetime, timedelta
import time

# Polygon.io API key
api_key = 'LN7rpB3UFWprPPOTQhVlXXtqA2Xp7NRg'

# Symbol to fetch data for
symbol = 'SPY'

# Define the intervals and date range
interval_map = {
    '1min': '1',
    '5min': '5',
    '15min': '15',
    '30min': '30',
    '60min': '60'
}
start_date = '2018-01-01'
end_date = '2023-01-01'
limit = 50000

# Function to fetch data from Polygon.io
def fetch_data(symbol, interval, start_date, end_date):
    base_url = 'https://api.polygon.io/v2/aggs/ticker'
    url = f"{base_url}/{symbol}/range/{interval_map[interval]}/minute/{start_date}/{end_date}?adjusted=true&sort=asc&limit={limit}&apiKey={api_key}"
    response = requests.get(url)
    if response.status_code != 200:
        raise Exception(f"API Request failed with status code {response.status_code}: {response.text}")
    data = response.json().get('results', [])
    df = pd.DataFrame(data)
    if not df.empty:
        df['timestamp'] = pd.to_datetime(df['t'], unit='ms')
        df.set_index('timestamp', inplace=True)
        df.rename(columns={
            'o': f'open_{interval}',
            'h': f'high_{interval}',
            'l': f'low_{interval}',
            'c': f'close_{interval}',
            'v': f'volume_{interval}'
        }, inplace=True)
    return df

# Start the timer
start_time = time.time()

# Fetch data using parallel requests
with concurrent.futures.ThreadPoolExecutor() as executor:
    futures = {executor.submit(fetch_data, symbol, interval, start_date, end_date): interval for interval in interval_map.keys()}
    dataframes = []
    for future in concurrent.futures.as_completed(futures):
        try:
            dataframes.append(future.result())
        except Exception as exc:
            print(f'Generated an exception: {exc}')

# Combine all dataframes
data_combined = pd.concat(dataframes, axis=1)
data_combined.dropna(inplace=True)

# End the timer and calculate elapsed time
end_time = time.time()
elapsed_time = end_time - start_time

# Print the earliest date in the combined dataset
earliest_date = data_combined.index.min()

print(data_combined.head())
print(f"Time taken: {elapsed_time:.2f} seconds")
print(f"Earliest date reached: {earliest_date}")
